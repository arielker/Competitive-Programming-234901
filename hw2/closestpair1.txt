We are given a vector of n points in the plane,
and the problem is to find out the closest pair of points in the vector.

Algorithm:
As a pre-processing step, the input vector is sorted according to x coordinates.
We assume that sorting is O(n log(n)).
1) Find the middle point in the sorted vector, we can take P[n/2] as middle point.
2) Divide the given vector in two halves.
The first sub-vector contains points from P[0] to P[n/2].
The second sub-vector contains points from P[n/2+1] to P[n-1].
3) Recursively find the smallest distances in both sub-vectors.
Let the distances be dl and dr. Find the minimum of dl and dr.
Let the minimum be d.
4) From the above 3 steps, we have an upper bound d of minimum distance.
Now we need to consider the pairs such that one point in pair is from the left
half and the other is from the right half.
Consider the vertical line passing through P[n/2] and find all points whose x
coordinate is closer than d to the middle vertical line.
Build a vector strip[] of all such points.
5) Sort the vector strip[] according to y coordinates. This step is O(nLog(n)).
6) Find the smallest distance in strip[]. It can be proved geometrically that
for every point in the strip, we only need to check at most 7 points after it.
7) Finally return the minimum of d and distance calculated in the above step (6).

Time complexity: O(n log^2(n))
The algorithm divides all points in two sets and recursively calls for two sets.
After dividing, it finds the strip in O(n) time, sorts the strip in O(nLog(n)) time
and finally finds the closest points in strip in O(n) time.
